name: Build

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Linux-specific dependencies (simplified)
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 libegl1 libglu1-mesa libglx-mesa0 \
            libxcb1 libxkbcommon0 libxcb-xinerama0 \
            libxcb-randr0 libxcb-render0 libxcb-shape0 \
            libxkbcommon-x11-0 \
            fuse libfuse2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build with PyInstaller (simplified)
      - name: Build with PyInstaller
        run: |
          # Print debug info
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import sys; print('Python path:', sys.path)"
          python -c "import PyQt6; print('PyQt6 location:', PyQt6.__file__)"

          # Clean build
          pyinstaller --clean --noconfirm --log-level=INFO main.spec
        shell: bash

      # Create platform-specific packages (simplified)
      - name: Create Linux AppImage
        if: runner.os == 'Linux'
        run: |
          # Download appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool

          # Create AppDir structure
          mkdir -p UserChrome-Loader.AppDir/usr/bin
          cp dist/userchrome-loader UserChrome-Loader.AppDir/usr/bin/

          # Create desktop file
          cat > UserChrome-Loader.AppDir/userchrome-loader.desktop << 'EOF'
          [Desktop Entry]
          Name=UserChrome Loader
          Exec=userchrome-loader
          Icon=userchrome-loader
          Type=Application
          Categories=Utility;
          EOF

          # Copy icon
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png UserChrome-Loader.AppDir/userchrome-loader.png
          else
            # Create minimal placeholder
            python -c "
          from PIL import Image
          img = Image.new('RGBA', (256, 256), (70, 130, 180, 255))
          img.save('UserChrome-Loader.AppDir/userchrome-loader.png')
          " || echo "Could not create icon, using touch"
            touch UserChrome-Loader.AppDir/userchrome-loader.png
          fi

          # Create AppRun
          cat > UserChrome-Loader.AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/userchrome-loader" "$@"
          EOF
          chmod +x UserChrome-Loader.AppDir/AppRun

          # Build AppImage
          ./appimagetool UserChrome-Loader.AppDir

          # Move to dist
          mkdir -p dist/linux
          mv UserChrome-Loader-*.AppImage dist/linux/userchrome-loader-linux.AppImage

      - name: Package Windows executable
        if: runner.os == 'Windows'
        run: |
          mkdir -p dist/windows
          cp dist/userchrome-loader.exe dist/windows/userchrome-loader-windows.exe
        shell: bash

      - name: Package macOS app
        if: runner.os == 'macOS'
        run: |
          mkdir -p dist/macos
          if [ -d "dist/UserChrome Loader.app" ]; then
            cp -r "dist/UserChrome Loader.app" "dist/macos/UserChrome Loader.app"
          else
            echo "Warning: App bundle not found, using executable"
            cp dist/userchrome-loader dist/macos/userchrome-loader-macos
          fi

      # Create archives
      - name: Create distribution archives
        run: |
          cd dist
          if [ "${{ runner.os }}" == "Linux" ]; then
            zip -r userchrome-loader-linux.zip linux/
          elif [ "${{ runner.os }}" == "Windows" ]; then
            powershell -Command "Compress-Archive -Path windows/* -DestinationPath userchrome-loader-windows.zip"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            zip -r userchrome-loader-macos.zip macos/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-${{ runner.os }}
          path: |
            dist/*.zip
          retention-days: 90

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f -name "*.zip" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*.zip
          name: "UserChrome Loader ${{ github.ref_name }}"
          token: ${{ github.token }}
          draft: false
          prerelease: false
