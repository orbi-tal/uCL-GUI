name: Build

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      # Enhanced Windows setup
      - name: Setup Windows build environment
        if: runner.os == 'Windows'
        run: |
          # Install Visual Studio Build Tools and Windows SDK
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.Windows11SDK.22621"

          # Install VC++ Redistributable
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe
          Start-Process -FilePath .\vc_redist.x64.exe -Args "/install /quiet /norestart" -Wait

          # Set environment variables for UCRT
          $env:UCRT_PATH = "${env:ProgramFiles(x86)}\Windows Kits\10\Redist\10.0.22621.0\ucrt\DLLs\x64"
          if (Test-Path $env:UCRT_PATH) {
            $env:PATH = "$env:UCRT_PATH;$env:PATH"
          }

          # Alternative UCRT path
          $env:UCRT_PATH2 = "${env:ProgramFiles}\Windows Kits\10\Redist\ucrt\DLLs\x64"
          if (Test-Path $env:UCRT_PATH2) {
            $env:PATH = "$env:UCRT_PATH2;$env:PATH"
          }

          echo "PATH=$env:PATH" >> $env:GITHUB_ENV
        shell: pwsh

      # Linux dependencies
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-glx libegl1-mesa libglu1-mesa \
            libxcb1 libxkbcommon0 libxcb-xinerama0 \
            libxcb-randr0 libxcb-render0 libxcb-shape0 \
            libxcb-shm0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 \
            libxcb-render-util0 libxcb-image0 libxcb-keysyms1 \
            libxcb-icccm4 libxcb-cursor0 libxkbcommon-x11-0 \
            fuse libfuse2 desktop-file-utils

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Setup for UCRT hooks on Windows
      - name: Setup PyInstaller hooks directory for Windows
        if: runner.os == 'Windows'
        run: |
          # Create hooks directory
          New-Item -ItemType Directory -Path "hooks" -Force
          
          # Copy pre-created hook files from workflow directory
          Copy-Item ".github/workflows/hooks/hook-ucrt.py" -Destination "hooks/hook-ucrt.py"
          Copy-Item ".github/workflows/hooks/runtime_hook.py" -Destination "runtime_hook.py"
          
          # Verify files were copied
          if (Test-Path "hooks/hook-ucrt.py" -and Test-Path "runtime_hook.py") {
            Write-Host "Hook files successfully copied"
          } else {
            Write-Error "Failed to copy hook files"
            exit 1
          }
        shell: pwsh

      # Build Windows executable
      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          # Debug info
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import PyQt6; print('PyQt6 location:', PyQt6.__file__)"

          # Build with additional hooks
          $env:PYTHONOPTIMIZE = 1
          pyinstaller --clean --noconfirm --log-level=INFO --additional-hooks-dir=hooks --runtime-hook=runtime_hook.py main.spec
        shell: pwsh

      # Build Linux executable
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import PyQt6; print('PyQt6 location:', PyQt6.__file__)"
          pyinstaller --clean --noconfirm --log-level=INFO main.spec
        shell: bash

      # Build macOS executable
      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import PyQt6; print('PyQt6 location:', PyQt6.__file__)"
          pyinstaller --clean --noconfirm --log-level=INFO main.spec
        shell: bash

      # Test Windows executable
      - name: Test Windows executable
        if: runner.os == 'Windows'
        run: |
          if (Test-Path dist\userchrome-loader.exe) {
            $fileInfo = Get-Item dist\userchrome-loader.exe
            Write-Host "Executable size: $($fileInfo.Length) bytes"

            # Check for bundled DLLs
            Write-Host "Checking for bundled DLLs..."
            $exeDir = Split-Path $fileInfo.FullName
            Get-ChildItem -Path $exeDir -Filter "*.dll" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found bundled DLL: $($_.Name)"
            }
            
            # Check critical DLLs
            $criticalDlls = @(
              "ucrtbase.dll",
              "api-ms-win-crt-runtime-l1-1-0.dll",
              "api-ms-win-core-path-l1-1-0.dll"
            )
            
            foreach ($dll in $criticalDlls) {
              if (Test-Path "$exeDir\$dll") {
                Write-Host "Critical DLL found: $dll" -ForegroundColor Green
              } else {
                Write-Host "Critical DLL missing: $dll" -ForegroundColor Yellow
              }
            }

            # Try to run executable
            try {
              $processInfo = New-Object System.Diagnostics.ProcessStartInfo
              $processInfo.FileName = $fileInfo.FullName
              $processInfo.Arguments = "--version"
              $processInfo.UseShellExecute = $false
              $processInfo.RedirectStandardOutput = $true
              $processInfo.RedirectStandardError = $true
              $processInfo.CreateNoWindow = $true

              $process = New-Object System.Diagnostics.Process
              $process.StartInfo = $processInfo
              $process.Start() | Out-Null

              if (-not $process.WaitForExit(5000)) {
                $process.Kill()
                Write-Warning "Executable test timed out"
              } else {
                Write-Host "Executable appears to be working (exit code: $($process.ExitCode))"
              }
            } catch {
              Write-Warning "Could not test executable: $($_.Exception.Message)"
            }
          } else {
            Write-Error "Executable not found!"
            exit 1
          }
        shell: pwsh

      # Package Windows executable
      - name: Package Windows executable
        if: runner.os == 'Windows'
        run: |
          if (Test-Path dist\userchrome-loader.exe) {
            # Rename executable
            Rename-Item -Path dist\userchrome-loader.exe -NewName userchrome-loader-windows.exe

            # Create README without multi-line variables to avoid YAML issues
            $readmeText = "UserChrome Loader for Windows`n`n"
            $readmeText += "SYSTEM REQUIREMENTS:`n"
            $readmeText += "- Windows 10 version 1903 (build 18362) or later`n"
            $readmeText += "- Windows 11 (all versions)`n`n"
            $readmeText += "DEPENDENCIES:`n"
            $readmeText += "- Microsoft Visual C++ Redistributable 2015-2022 (x64)`n"
            $readmeText += "  Download: https://aka.ms/vs/17/release/vc_redist.x64.exe`n`n"
            $readmeText += "TROUBLESHOOTING:`n"
            $readmeText += "If you get 'Missing DLL' or 'Application failed to start' errors:`n`n"
            $readmeText += "1. Install/Reinstall VC++ Redistributable (link above)`n"
            $readmeText += "2. Update Windows to the latest version`n"
            $readmeText += "3. If on Windows 10, ensure you have version 1903 or later`n`n"
            $readmeText += "WINDOWS 10 SPECIFIC NOTES:`n"
            $readmeText += "- Older versions of Windows 10 (before 1903) may have compatibility issues`n"
            $readmeText += "- The Universal C Runtime (UCRT) must be installed (usually via Windows Update)`n`n"
            $readmeText += "For support, visit: [your support URL]"
            Set-Content -Path "dist\README-Windows.txt" -Value $readmeText

            # Create troubleshooting batch file without multi-line variables
            $batchText = "@echo off`r`n"
            $batchText += "echo UserChrome Loader - Windows Troubleshoot Helper`r`n"
            $batchText += "echo.`r`n"
            $batchText += "echo Checking system compatibility...`r`n"
            $batchText += "echo.`r`n`r`n"
            $batchText += "ver | find ""10.0"" >nul`r`n"
            $batchText += "if %errorlevel%==0 (`r`n"
            $batchText += "  echo Windows 10/11 detected - Good!`r`n"
            $batchText += ") else (`r`n"
            $batchText += "  echo WARNING: Windows version may not be supported`r`n"
            $batchText += ")`r`n`r`n"
            $batchText += "echo.`r`n"
            $batchText += "echo Checking for VC++ Redistributable...`r`n"
            $batchText += "reg query ""HKLM\SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\x64"" /v Version >nul 2>&1`r`n"
            $batchText += "if %errorlevel%==0 (`r`n"
            $batchText += "  echo VC++ Redistributable found - Good!`r`n"
            $batchText += ") else (`r`n"
            $batchText += "  echo WARNING: VC++ Redistributable may not be installed`r`n"
            $batchText += "  echo Download from: https://aka.ms/vs/17/release/vc_redist.x64.exe`r`n"
            $batchText += ")`r`n`r`n"
            $batchText += "echo.`r`n"
            $batchText += "echo Attempting to run UserChrome Loader...`r`n"
            $batchText += "echo.`r`n"
            $batchText += "userchrome-loader-windows.exe"
            Set-Content -Path "dist\run-with-troubleshooting.bat" -Value $batchText
          } else {
            Write-Error "Windows executable not found!"
            exit 1
          }
        shell: pwsh

      # Create Linux AppImage
      - name: Create Linux AppImage
        if: runner.os == 'Linux'
        run: |
          # Download appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool

          # Create AppDir structure
          mkdir -p UserChrome-Loader.AppDir/usr/bin
          cp dist/userchrome-loader UserChrome-Loader.AppDir/usr/bin/

          # Create desktop file
          echo "[Desktop Entry]" > UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Name=UserChrome Loader" >> UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Exec=userchrome-loader" >> UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Icon=userchrome-loader" >> UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Type=Application" >> UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Categories=Utility;" >> UserChrome-Loader.AppDir/userchrome-loader.desktop
          echo "Comment=Tool for managing Firefox userChrome customizations" >> UserChrome-Loader.AppDir/userchrome-loader.desktop

          # Create or copy icon
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png UserChrome-Loader.AppDir/userchrome-loader.png
          else
            echo "Creating placeholder icon"
            touch UserChrome-Loader.AppDir/userchrome-loader.png
          fi

          # Create AppRun script
          echo "#!/bin/bash" > UserChrome-Loader.AppDir/AppRun
          echo 'HERE="$(dirname "$(readlink -f "${0}")")"' >> UserChrome-Loader.AppDir/AppRun
          echo 'export PATH="${HERE}/usr/bin:${PATH}"' >> UserChrome-Loader.AppDir/AppRun
          echo 'export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"' >> UserChrome-Loader.AppDir/AppRun
          echo 'exec "${HERE}/usr/bin/userchrome-loader" "$@"' >> UserChrome-Loader.AppDir/AppRun
          chmod +x UserChrome-Loader.AppDir/AppRun

          # Build AppImage
          ARCH=x86_64 ./appimagetool UserChrome-Loader.AppDir userchrome-loader-linux.AppImage
          mkdir -p dist
          mv userchrome-loader-linux.AppImage dist/

      # Package macOS app
      - name: Package macOS app
        if: runner.os == 'macOS'
        run: |
          if [ -d "dist/UserChrome Loader.app" ]; then
            # Create DMG
            hdiutil create -volname "UserChrome Loader" -srcfolder "dist/UserChrome Loader.app" -ov -format UDZO dist/userchrome-loader-macos.dmg
          else
            echo "Warning: App bundle not found"
            if [ -f "dist/userchrome-loader" ]; then
              mv dist/userchrome-loader dist/userchrome-loader-macos
            else
              echo "Error: No macOS executable found"
              exit 1
            fi
          fi

      # Upload artifacts
      - name: Upload artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-Windows
          path: |
            dist/userchrome-loader-windows.exe
            dist/README-Windows.txt
            dist/run-with-troubleshooting.bat
          retention-days: 90

      - name: Upload artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-Linux
          path: dist/userchrome-loader-linux.AppImage
          retention-days: 90

      - name: Upload artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-macOS
          path: |
            dist/userchrome-loader-macos.dmg
            dist/*.app
          retention-days: 90

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.exe
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
          name: "UserChrome Loader ${{ github.ref_name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false