name: Build

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Linux-specific dependencies
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 libgirepository1.0-dev \
                               fuse libfuse2 libglib2.0-0 libcairo2 libxcb1 libgtk-3-0 \
                               libgl1-mesa-glx libegl1 libxkbcommon0 libxcb-xinerama0 \
                               libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 \
                               libxcb-randr0 libxcb-render0 libxcb-shape0 libxcb-shm0 \
                               libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0 \
                               imagemagick
          # Download appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build with PyInstaller
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          export OPTIMIZE=1
          # No special system dependencies needed anymore
          sudo apt-get update
          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import zipfile; print(f'zipfile: {zipfile.__file__}')"
          python -c "import tarfile; print(f'tarfile: {tarfile.__file__}')"
          # Build with detailed logging
          pyinstaller --clean --noconfirm --log-level=DEBUG main.spec
        shell: bash

      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          export OPTIMIZE=1
          # Skip libarchive installation - application works without it
          # Just use Python's built-in zipfile and tarfile modules

          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import zipfile; print(f'zipfile: {zipfile.__file__}')"
          python -c "import tarfile; print(f'tarfile: {tarfile.__file__}')"

          # Build with detailed logging (no hidden-import flags when using spec file)
          pyinstaller --clean --noconfirm --log-level=DEBUG main.spec
        shell: bash

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:OPTIMIZE = 1
          $env:PYTHONPATH = $env:pythonLocation
          $env:PATH = "$env:pythonLocation;$env:pythonLocation\Scripts;$env:PATH"

          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import zipfile; print(f'zipfile: {zipfile.__file__}')"
          python -c "import tarfile; print(f'tarfile: {tarfile.__file__}')"

          # Build with PyInstaller with more verbose output (no hidden-import flags when using spec file)
          pyinstaller --clean --noconfirm --log-level=DEBUG main.spec
        shell: pwsh

      # Create platform-specific packages
      - name: Create Linux package
        if: runner.os == 'Linux'
        run: |
          # Rename the executable for AppDir structure
          mkdir -p UserChrome-Loader.AppDir/usr/bin
          cp dist/userchrome-loader UserChrome-Loader.AppDir/usr/bin/
          
          # Create desktop file
          cat > UserChrome-Loader.AppDir/userchrome-loader.desktop << EOF
          [Desktop Entry]
          Name=UserChrome Loader
          Exec=userchrome-loader
          Icon=userchrome-loader
          Type=Application
          Categories=Utility;
          EOF
          
          # Copy icon (assuming there's an icon file in assets)
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png UserChrome-Loader.AppDir/userchrome-loader.png
          else
            # Create a placeholder icon if none exists
            echo "No icon found, creating placeholder"
            convert -size 256x256 xc:transparent UserChrome-Loader.AppDir/userchrome-loader.png
          fi
          
          # Create AppRun script
          cat > UserChrome-Loader.AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          export QT_PLUGIN_PATH="${HERE}/usr/lib/qt/plugins"
          export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/lib/qt/plugins/platforms"
          export QT_QPA_PLATFORM=xcb
          exec "${HERE}/usr/bin/userchrome-loader" "$@"
          EOF
          chmod +x UserChrome-Loader.AppDir/AppRun
          
          # Create AppImage
          ./appimagetool UserChrome-Loader.AppDir
          
          # Rename and move the AppImage to dist directory
          mkdir -p dist/linux
          mv UserChrome-Loader-x86_64.AppImage dist/linux/userchrome-loader-linux.AppImage
          
          # Create a zip archive of the AppImage
          cd dist
          zip -r userchrome-loader-linux.zip linux
          cd ..

      - name: Create Windows package
        if: runner.os == 'Windows'
        run: |
          # Rename the executable
          mv dist/userchrome-loader.exe dist/userchrome-loader-windows.exe
          # Create a zip archive for Windows
          cd dist && powershell Compress-Archive -Path userchrome-loader-windows.exe -DestinationPath userchrome-loader-windows.zip

      - name: Create macOS package
        if: runner.os == 'macOS'
        run: |
          # First rename the app bundle
          mv dist/userchrome-loader.app dist/userchrome-loader-macos.app
          # Create a zip archive of the app bundle to preserve its structure
          cd dist && zip -r userchrome-loader-macos.zip userchrome-loader-macos.app && cd ..

      - name: Prepare artifacts for upload
        run: |
          mkdir -p userchrome-loader-${{ runner.os }}
          if [ "${{ runner.os }}" == "Linux" ]; then
            cp dist/userchrome-loader-linux.zip userchrome-loader-${{ runner.os }}/
          elif [ "${{ runner.os }}" == "Windows" ]; then
            cp dist/userchrome-loader-windows.zip userchrome-loader-${{ runner.os }}/
          elif [ "${{ runner.os }}" == "macOS" ]; then
            # Copy the zip file
            cp dist/userchrome-loader-macos.zip userchrome-loader-${{ runner.os }}/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-${{ runner.os }}
          path: userchrome-loader-${{ runner.os }}
          retention-days: 90

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          ls -la artifacts/
          find artifacts -type f | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/userchrome-loader-Linux/*.zip
            artifacts/userchrome-loader-Windows/*.zip
            artifacts/userchrome-loader-macOS/*.zip
          name: "UserChrome Loader ${{ github.ref_name }}"
          token: ${{ github.token }}
          draft: false
          prerelease: false
