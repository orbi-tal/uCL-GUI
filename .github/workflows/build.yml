name: Build

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Linux-specific dependencies
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 libgirepository1.0-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install libarchive-c



      # Build with PyInstaller
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          export OPTIMIZE=1
          # Install system dependencies for libarchive
          sudo apt-get update
          sudo apt-get install -y libarchive-dev
          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import libarchive; print(f'libarchive: {libarchive.__file__}')"
          # Build with detailed logging
          pyinstaller --clean --noconfirm --log-level=DEBUG --hidden-import libarchive.public --hidden-import libarchive.extract --hidden-import libarchive.write --hidden-import libarchive.read main.spec
        shell: bash

      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          export OPTIMIZE=1
          # Install libarchive with Homebrew
          brew install libarchive
          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import libarchive; print(f'libarchive: {libarchive.__file__}')"
          # Build with detailed logging
          pyinstaller --clean --noconfirm --log-level=DEBUG --hidden-import libarchive.public --hidden-import libarchive.extract --hidden-import libarchive.write --hidden-import libarchive.read main.spec
        shell: bash

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:OPTIMIZE = 1
          $env:PYTHONPATH = $env:pythonLocation
          $env:PATH = "$env:pythonLocation;$env:pythonLocation\Scripts;$env:PATH"
          
          # Print Python paths and debug info
          python -c "import sys; print(sys.path)"
          python -c "import libarchive; print(f'libarchive: {libarchive.__file__}')"
          
          # Build with PyInstaller with more verbose output
          pyinstaller --clean --noconfirm --log-level=DEBUG --hidden-import libarchive.public --hidden-import libarchive.extract --hidden-import libarchive.write --hidden-import libarchive.read --hidden-import libarchive.entry main.spec
        shell: pwsh

      # Create platform-specific packages
      - name: Create Linux package
        if: runner.os == 'Linux'
        run: |
          # Test if the executable can run
          dist/userchrome-loader --help || echo "Executable test failed, but continuing..."
          
          # Rename the executable
          mv dist/userchrome-loader dist/userchrome-loader-linux
          
          # Copy libarchive shared library to the same directory
          mkdir -p dist/libs
          cp -P /usr/lib/x86_64-linux-gnu/libarchive.so* dist/libs/
          
          # Create a zip archive for Linux
          cd dist && zip -r userchrome-loader-linux.zip userchrome-loader-linux libs && cd ..

      - name: Create Windows package
        if: runner.os == 'Windows'
        run: |
          # Rename the executable
          mv dist/userchrome-loader.exe dist/userchrome-loader-windows.exe
          # Create a zip archive for Windows
          cd dist && powershell Compress-Archive -Path userchrome-loader-windows.exe -DestinationPath userchrome-loader-windows.zip

      - name: Create macOS package
        if: runner.os == 'macOS'
        run: |
          # First rename the app bundle
          mv dist/userchrome-loader.app dist/userchrome-loader-macos.app
          # Create a zip archive of the app bundle to preserve its structure
          cd dist && zip -r userchrome-loader-macos.zip userchrome-loader-macos.app && cd ..

      - name: Prepare artifacts for upload
        run: |
          mkdir -p userchrome-loader-${{ runner.os }}
          if [ "${{ runner.os }}" == "Linux" ]; then
            cp dist/userchrome-loader-linux.zip userchrome-loader-${{ runner.os }}/
          elif [ "${{ runner.os }}" == "Windows" ]; then
            cp dist/userchrome-loader-windows.zip userchrome-loader-${{ runner.os }}/
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cp dist/userchrome-loader-macos.zip userchrome-loader-${{ runner.os }}/
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-${{ runner.os }}
          path: userchrome-loader-${{ runner.os }}
          retention-days: 90

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          ls -la artifacts/
          find artifacts -type f | sort



      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/userchrome-loader-Linux/*.zip
            artifacts/userchrome-loader-Windows/*.zip
            artifacts/userchrome-loader-macOS/*.zip
          token: ${{ github.token }}
          draft: false
          prerelease: false
